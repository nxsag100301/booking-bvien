import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import { createMaterialTopTabNavigator } from '@react-navigation/material-top-tabs';
import { parseSizeWidth, parseSizeHeight } from '../../theme';
import MyHeader from '../../components/Header/MyHeader';

const Tab = createMaterialTopTabNavigator();

// M√†n h√¨nh ch√≠nh ch·ª©a header v√† c√°c tab
const DetailMedicalHistory = ({ route }) => {
  const { id } = route.params;

  return (
    <>
      <MyHeader headerTitle="Chi ti·∫øt kh√°m b·ªánh" />
      <Tab.Navigator
        screenOptions={{
          tabBarLabelStyle: { fontSize: parseSizeWidth(13), fontWeight: '600' },
          tabBarIndicatorStyle: { backgroundColor: '#0057a3' },
        }}
      >
        <Tab.Screen name="Ch·∫©n ƒëo√°n" component={TabDiagnosis} />
        <Tab.Screen name="Ch·ªâ ƒë·ªãnh" component={TabServices} />
        <Tab.Screen name="Thu·ªëc" component={TabMedications} />
      </Tab.Navigator>
    </>
  );
};

// Tab 1: Ch·∫©n ƒëo√°n
const TabDiagnosis = () => {
  const data = [
    {
      department: 'N·ªôi t·ªïng qu√°t',
      dateTime: '2025-06-28 08:30',
      doctor: 'BS. Nguy·ªÖn VƒÉn A',
      room: 'P101',
      symptoms: 'S·ªët, ho, m·ªát m·ªèi',
      diagnosis: ['C·∫£m c√∫m', 'Vi√™m h·ªçng nh·∫π'],
      vitals: {
        temperature: '37.5¬∞C',
        pulse: '80 bpm',
        bloodPressure: '120/80 mmHg',
      },
    },
  ];

  return (
    <ScrollView style={styles.tabContainer}>
      {/* Sinh hi·ªáu */}
      <View style={styles.card}>
        <Text style={styles.sectionTitle}>Sinh hi·ªáu</Text>
        <Text>Nhi·ªát ƒë·ªô: {data[0].vitals.temperature}</Text>
        <Text>Nh·ªãp tim: {data[0].vitals.pulse}</Text>
        <Text>Huy·∫øt √°p: {data[0].vitals.bloodPressure}</Text>
      </View>

      {/* Theo t·ª´ng khoa */}
      {data.map((item, index) => (
        <View key={index} style={styles.card}>
          <Text style={styles.sectionTitle}>{item.department}</Text>
          <Text>Ng√†y gi·ªù kh√°m: {item.dateTime}</Text>
          <Text>B√°c sƒ© kh√°m: {item.doctor}</Text>
          <Text>Ph√≤ng kh√°m: {item.room}</Text>
          <Text>Tri·ªáu ch·ª©ng: {item.symptoms}</Text>
          <Text style={styles.subTitle}>Ch·∫©n ƒëo√°n:</Text>
          {item.diagnosis.map((d, i) => (
            <Text key={i}>- {d}</Text>
          ))}
        </View>
      ))}
    </ScrollView>
  );
};

// Tab 2: Ch·ªâ ƒë·ªãnh
const TabServices = () => {
  const data = [
    {
      department: 'X√©t nghi·ªám',
      services: [
        {
          name: 'C√¥ng th·ª©c m√°u',
          quantity: 1,
          unit: 'l·∫ßn',
          doctor: 'BS. Tr·∫ßn Th·ªã B',
          hasResult: true,
        },
      ],
    },
  ];

  return (
    <ScrollView style={styles.tabContainer}>
      {data.map((dept, idx) => (
        <View key={idx} style={styles.card}>
          <Text style={styles.sectionTitle}>{dept.department}</Text>
          {dept.services.map((s, i) => (
            <View key={i} style={styles.rowBetween}>
              <View style={styles.flex1}>
                <Text>{s.name}</Text>
                <Text style={styles.subDetail}>
                  SL: {s.quantity} {s.unit}
                </Text>
                <Text style={styles.subDetail}>BS: {s.doctor}</Text>
              </View>
              {s.hasResult && (
                <TouchableOpacity>
                  <Text style={styles.pdfIcon}>üìÑ</Text>
                </TouchableOpacity>
              )}
            </View>
          ))}
        </View>
      ))}
    </ScrollView>
  );
};

// Tab 3: Thu·ªëc
const TabMedications = () => {
  const data = [
    {
      department: 'N·ªôi t·ªïng qu√°t',
      prescriptions: [
        {
          code: 'RX001',
          medicines: [
            {
              name: 'Paracetamol',
              quantity: 10,
              unit: 'vi√™n',
              usage: 'U·ªëng sau ƒÉn',
            },
            {
              name: 'Vitamin C',
              quantity: 5,
              unit: 'vi√™n',
              usage: 'Ng√†y 1 l·∫ßn',
            },
          ],
        },
      ],
    },
  ];

  return (
    <ScrollView style={styles.tabContainer}>
      {data.map((dept, i) => (
        <View key={i} style={styles.card}>
          <Text style={styles.sectionTitle}>{dept.department}</Text>
          {dept.prescriptions.map((pres, j) => (
            <View key={j} style={styles.prescriptionBox}>
              <Text style={styles.subTitle}>M√£ toa: {pres.code}</Text>
              {pres.medicines.map((med, k) => (
                <View key={k} style={styles.rowBetween}>
                  <View style={styles.flex1}>
                    <Text>{med.name}</Text>
                    <Text style={styles.subDetail}>
                      SL: {med.quantity} {med.unit}
                    </Text>
                    <Text style={styles.subDetail}>C√°ch d√πng: {med.usage}</Text>
                  </View>
                  <TouchableOpacity>
                    <Text style={styles.pdfIcon}>üìÑ</Text>
                  </TouchableOpacity>
                </View>
              ))}
            </View>
          ))}
        </View>
      ))}
    </ScrollView>
  );
};

export default DetailMedicalHistory;

const styles = StyleSheet.create({
  tabContainer: {
    padding: parseSizeWidth(16),
    backgroundColor: '#f4f6f9',
    flex: 1,
  },
  card: {
    backgroundColor: '#fff',
    borderRadius: parseSizeWidth(12),
    padding: parseSizeWidth(16),
    marginBottom: parseSizeHeight(16),
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  sectionTitle: {
    fontSize: parseSizeWidth(15),
    fontWeight: 'bold',
    marginBottom: parseSizeHeight(8),
    color: '#0057a3',
  },
  subTitle: {
    fontWeight: '600',
    marginTop: parseSizeHeight(8),
  },
  subDetail: {
    color: '#666',
    fontSize: parseSizeWidth(13),
  },
  rowBetween: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginTop: parseSizeHeight(8),
  },
  prescriptionBox: {
    marginTop: parseSizeHeight(10),
  },
  flex1: {
    flex: 1,
  },
});
